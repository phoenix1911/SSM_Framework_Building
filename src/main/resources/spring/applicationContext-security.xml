<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd"
       default-autowire="byName">

    <!--
    1、设置放行资源，如登录注册页面，静态资源css、js等等
        security="none" 设置此资源不被拦截.
    -->
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/loginerror.html" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>

    <security:http>
        <!-- 2、拦截所有（除放行资源外） -->
        <security:intercept-url pattern="/users/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />
        <!--只有ADMIN角色访问-->
        <security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
        
        <!--
            3、登录表单设置
            1)login-page：指定登录页面；
            2)login-processing-url：指定登录请求路径；
            3)default-target-url：指定了成功进行身份验证和授权后默认呈现给用户的页面；
            4)always-use-default-target：指定了是否在身份验证通过后总是跳转到；default-target-url 属性指定的 URL。
            5)authentication-failure-url：指定了身份验证失败时跳转到的页面；
         -->

        <security:form-login login-page="/login.html"
                    login-processing-url="/login"
                    always-use-default-target="true"
                    default-target-url="/index.jsp"
                    authentication-failure-url="/loginerror.html"

        />
        <!--   4、注销设置
                  1)logout-url：指定注销的url；
                  2)logout-success-url：注销成功后登录返回的页面。
        -->
        <security:logout logout-url="/logout" logout-success-url="/login.html"/>
        <!--
            5、跨站请求设置（我们这里关闭）
               1)csrf disabled="true" 关闭 csrf ,如果不加会出现错误
               2)CSRF（Cross-site request forgery）:跨站请求伪造，
                 也被称为“One Click Attack”或者 SessionRiding，
                 通常缩写为 CSRF 或者 XSRF，是一种对网站的恶意利用。
         -->
        <security:csrf disabled="true" />

        <!-- 6、iframe 框架结构展示 -->
        <security:headers>
            <security:frame-options policy="SAMEORIGIN" />
        </security:headers>

        <security:custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="myFilter"/>

    </security:http>

    <bean id="myFilter" class="com.jialong.security.interceptor.MyFilterSecurityInterceptor" >
        <property name="authenticationManager" ref="authenticationManager" />
        <property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
        <property name="securityMetadataSource" ref="securityMetadataSource" />
    </bean>

    <security:authentication-manager alias="authenticationManager" >
        <security:authentication-provider ref="daoAuthenticationProvider" />
    </security:authentication-manager>

    <bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="userDetailsService" ref="myUserDetailService" />
        <!--<property name="passwordEncoder" ref="passwordEncoder" />-->
    </bean>

    <!-- spring推荐的单向加密算法 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!-- 在这个类中，读入用户的密码，角色信息，是否锁定，账号是否过期等属性信息  -->
    <bean id="myUserDetailService" class="com.jialong.security.interceptor.MyUserDetailService" />

    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <bean id="myAccessDecisionManagerBean" class="com.jialong.security.interceptor.MyAccessDecisionManager" />

    <!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
    <bean id="securityMetadataSource" class="com.jialong.security.interceptor.MyFilterSecurityMetadataSource" />

    <!--<bean id="myAuthenticationSuccessHandler" class="com.jialong.security.interceptor.MyAuthenticationSuccessHandler"/>-->


    <!--&lt;!&ndash;认证管理器 2）数据库管理方式&ndash;&gt;-->
    <!--<security:authentication-manager>-->
        <!--<security:authentication-provider user-service-ref='myUserDetailsService'/>-->
    <!--</security:authentication-manager>-->

    <!--&lt;!&ndash; 这里使用的默认实现，可以自己定义 &ndash;&gt;-->
    <!--<bean id="myUserDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->



</beans>
